import { GoogleGenerativeAI, Part } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);

export const generateLogo = async (base64Sketch: string) => {
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp-image-generation",
  });

  const generationConfig = {
    temperature: 0.7,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 2048,
    responseModalities: ["Text", "Image"],
  };

  try {
    const chatSession = model.startChat({ generationConfig, history: [] });

    // this is the prompt and the sketch
    const result = await chatSession.sendMessage([
      {
        text: "Convert this rough sketch into a professional logo. Include only the logo in the image, with nothing else.",
      },
      { inlineData: { data: base64Sketch, mimeType: "image/png" } },
    ] as Part[]);

    // Extract the generated image from the response
    const response = result.response;
    if (!response || !response.candidates || response.candidates.length === 0) {
      throw new Error("No response from AI");
    }

    const candidate = response.candidates[0];
    if (!candidate?.content?.parts) {
      throw new Error("Invalid response structure");
    }

    for (const part of candidate.content.parts) {
      if (part.inlineData) {
        return `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`;
      }
    }

    throw new Error("No image generated by AI");
  } catch (error) {
    console.error("Gemini API Error:", error);
    throw new Error("AI logo generation failed");
  }
};
